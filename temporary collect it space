##############
#Turtle - Collect It Game
#Name
#Date
#
#Task: To create a simple game where the player controls a turtle that can move left and right while trying to collect falling items.
##############

#####Setup#####
#Use this section to organize global data

#Import Libraries
import turtle as t
import random as r
import time as ti
#Global Variable
jeff = t.Turtle()
jeb = t.Turtle()
bob = t.Turtle()
herbert = t.Turtle()
coby = t.Turtle()

FONTSIZE = 10
FONT = ('Arial', FONTSIZE, 'normal')

#The food
t1 = t.Turtle()
t2 = t.Turtle()
t3 = t.Turtle()
t4 = t.Turtle()

#The poison
p1 = t.Turtle()
p2 = t.Turtle()
p3 = t.Turtle()

screen = t.Screen()

#Lists
foods = [t1,t2,t3,t4]
poisons = [p1,p2,p3]
score = []
lives_lost = []
powerups_used = []
start_game = []
#####Functions#####

##Core Game Functions##

#Intro Screen
def start_screen():
    coby.ht()
    coby.penup()
    coby.goto(-190,85)
    coby.write("Welcome to the hit new game 'collect it'.",font=FONT)
    coby.goto(-190,70)
    coby.write("You play as the organge arrow and you move by using the 'a' and 'd'",font=FONT)
    coby.goto(-190,55)
    coby.write("You can also use the left and right arrows to 'worp' 5 times the normal.", font=FONT)
    coby.goto(-190,40)
    coby.write("to go left and right to eat the green food. Don't eat the red poison or you will loose points.",font=FONT) 
    coby.goto(-190,25)
    coby.write("If you miss one green food you will lose a life and you only have 5.", font=FONT)
    coby.goto(-190,10)
    coby.write("Press space to start.", font=FONT)

def clear_start_screen():
    start_game.append(1)
    coby.clear()

#Create Score
#Create the score field on the top of the screen
def setup_score():
    jeb.penup()
    jeb.ht()
    jeb.speed(0)
    jeb.goto(-175,-170)
    jeb.write("score : ")
    jeb.goto(-165,-185)
    jeb.write(0)

#This sets up the life count on the bottom right
def setup_lives():
    bob.penup()
    bob.ht()
    bob.speed(0)
    bob.goto(150,-170)
    bob.write("Lives : ")
    bob.goto(160,-185)
    bob.write(5)

#It shows how many powerups you have left, it appears on the top right.      
def setup_powerups():
    herbert.ht()
    herbert.penup()
    herbert.speed(0)
    herbert.goto(140,150)
    herbert.write("powerups :")
    herbert.goto(160,135)
    herbert.write(5)
    
#Create Player
#Create and draw player onto the screen in starting position
def setup_player():
    jeff.color("orange")
    jeff.penup()
    jeff.speed(0)
    jeff.goto(0,-170)
    jeff.speed(3)

#Create food
#Use a for loop to store your food into a list
def create_food():
    for food in foods:
        food.ht()
        food.setheading(-90)
        food.penup()
        food.speed(0)
        rand_y = r.randrange(200,500)
        rand_x = r.randrange(-155,155)
        food.goto(rand_x,rand_y)
        food.showturtle()
        food.color("lime green")
        food.speed(3)

#Create poison, uses the list poisons
def create_poison():
    for poison in poisons:
        poison.ht()
        poison.setheading(-90)
        poison.penup()
        poison.speed(0)
        rand_y = r.randrange(225,600)
        rand_x = r.randrange(-155,155)
        poison.goto(rand_x,rand_y)
        poison.showturtle()
        poison.color("red")
        poison.speed(2)

#Move Player Left
#Move player left in response to arrow key
def left():
    jeff.backward(5)
    check_horizontal_bounds()

#Move Player Right
#Move player right in response to arrow key
def right():
    jeff.forward(5)
    check_horizontal_bounds()

#Move player left more the the normal move commmand 
def super_left():
    if sum(powerups_used)<5:
        jeff.speed(0)
        update_powerups()
        jeff.backward(25)
        jeff.speed(3)
        check_horizontal_bounds()

#Move player right more the the normal move commmand 
def super_right():
    if sum(powerups_used)<5:
        update_powerups()
        jeff.speed(0)
        jeff.forward(25)
        jeff.speed(3)
        check_horizontal_bounds()

#Move food 
#Go through your list of foods and move each item
def move_food():
    for food in foods:
        dist = r.randrange(3,5)
        food.forward(dist)
        check_vertical_bounds_food(food)
        eat_food(food)

#Moves each poison from list of poisons       
def move_poison():
    for poison in poisons:
        dist = r.randrange(2,4)
        poison.forward(dist)
        check_vertical_bounds_poison(poison)
        eat_poison(poison)

#Check Player Screen Bounds (Horizontal)
#Check to see if the player is within the vertical bounds, if not set the player to the bound
def check_horizontal_bounds():
    if int(jeff.xcor())<-155:
        jeff.goto(-155,-170)
    if int(jeff.xcor())>160:
        jeff.goto(160,-170)

#Check Collectable Screen Bounds (Vertical)
#Check to see if food is below vertical bounds, if so move back to the top
#Must pass the item in as an arguement
def check_vertical_bounds_food(food):
    y_cor = food.ycor()
    if y_cor <= -210:
        food.ht()
        rand_y = r.randrange(200,600)
        rand_x = r.randrange(-145,145)
        update_lives()
        food.speed(0)
        food.goto(rand_x,rand_y)
        food.speed(3)
        food.showturtle()
        return 
    else:
        return

#checks to see if the poison is below vertical limit if so moves back to top
def check_vertical_bounds_poison(poison):
    y_cor = poison.ycor()
    if int(poison.ycor())<=-210:
        poison.ht()
        rand_y = r.randrange(275,700)
        rand_x = r.randrange(-145,140)
        poison.speed(0)
        poison.goto(rand_x,rand_y)
        poison.speed(2)
        poison.showturtle()
        return
    else:
        return

#Check Player Catch Collectable
#Pass in a collectable item from a list and determine if it is in contact/proximity with the player
#Must pass the item in as an arguement
def eat_food(food):
    if int(food.distance(jeff))<=8:
        update_score()
        food.ht()
        rand_y = r.randrange(200,500)
        rand_x = r.randrange(-185,185)
        food.speed(0)
        food.goto(rand_x,rand_y)
        food.speed(3)
        food.showturtle()

#Checks to see if poison is eaten
def eat_poison(poison):
    if int(poison.distance(jeff))<=8:
        decrease_score()
        poison.ht()
        rand_y = r.randrange(200,500)
        rand_x = r.randrange(-185,185)
        poison.speed(0)
        poison.goto(rand_x,rand_y)
        poison.speed(3)
        poison.showturtle()

#This will update the counter on the top right of the screen
def update_powerups():
    powerups_used.append(1)
    herbert.dot(10,"white")
    herbert.write(5-sum(powerups_used))

#Update Score (could use argument to make lives go up or down)
#If contact between collectable and player is made, update global score
def update_score():
    score.append(100)
    jeb.dot(15.5,"white")
    jeb.write(sum(score))

#If poison is eaten it will decrease the score
def decrease_score():
    score.append(-50)
    jeb.dot(16,"white")
    jeb.write(sum(score))

#Life Tracker
def update_lives():
    lives_lost.append(1)
    life = 5 - sum(lives_lost)
    bob.dot(15,"white")
    bob.write(life)
    if life == 0:
        game_over()

#Game Over Screen
def game_over():
    repeat = input("You died. Do you wish to play again? ")
    if repeat == "yes":
        jeb.clear()
        bob.clear()
        herbert.clear()
        lives_lost.clear()
        setup_player()
        create_food()
        create_poison()
        setup_score()
        setup_lives()
        setup_powerups()
        screen.listen()
    else:
        exit()

##Extendable Functions##

#####Setup Function Calls#####
#Use this section to call any core functions that are only called once and help to setup the turtle/game environment
# ht()
start_screen()
setup_player()
setup_powerups()
setup_score()
setup_lives()
create_food()
create_poison()
screen.onkey(left , "a")
screen.onkey(right , 'd')
screen.onkey(super_left , "Left")
screen.onkey(super_right , 'Right')
screen.onkey(clear_start_screen , "f")
screen.listen()

#####Core Game Loop#####
#Use this while loop to create your game loop, define logic and call above functions
while sum(start_game) == 1:
    move_food()
    move_poison()
