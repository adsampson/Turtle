##############
#Turtle - Collect It Game
#Name
#Date
#
#Task: To create a simple game where the player controls a turtle that can move left and right while trying to collect falling items.
##############

#####Setup#####
#Use this section to organize global data

#Import Libraries
import turtle as t
import random as r
#Global Variable
jeff = t.Turtle()
jeb = t.Turtle()
bob = t.Turtle()
herbert = t.Turtle()
ht()

x = 5

t1 = t.Turtle()
t2 = t.Turtle()
t3 = t.Turtle()
t4 = t.Turtle()
screen = t.Screen()
#Lists

foods = [t1,t2,t3,t4]
score = []
lives_lost = []
powerups = []
powerups_used = []
#####Functions#####

##Core Game Functions##

#Create Score
#Create the score field on the top of the screen
def setup_score():
    jeb.penup()
    jeb.ht()
    jeb.goto(-175,-170)
    jeb.write("score : ")
    jeb.goto(-165,-185)
    jeb.write(0)

def setup_lives():
    bob.penup()
    bob.ht()
    bob.goto(150,-170)
    bob.write("Lives : ")
    bob.goto(160,-185)
    bob.write(5)
    
#Create Player
#Create and draw player onto the screen in starting position
def create_player():
    jeff.color("orange")
    jeff.penup()
    jeff.goto(0,-170)

def powerups_disply():
    herbert.ht()
    herbert.penup()
    herbert.goto(150,150)
    herbert.write("powerups :")
    herbert.write(5-sum(powerups_used))

#Move Player Left
#Move player left in response to arrow key
def left():
    jeff.backward(7)
    check_horizontal_bounds()

def super_left():
    if sum(powerups)<5:
        jeff.backward(20)
        powerups.append(1)
        pwerups_used.append(1)

#Move Player Right
#Move player right in response to arrow key
def right():
    jeff.forward(7)
    check_horizontal_bounds()

def super_right():
    if sum(powerups)<5:
        jeff.forward(20)
        powerups.append(1)
        pwerups_used.append(1)
        
#Check Player Screen Bounds (Horizontal)
#Check to see if the player is within the vertical bounds, if not set the player to the bound
def check_horizontal_bounds():
    if int(jeff.xcor())<-165:
        jeff.goto(-165,-170)
    if int(jeff.xcor())>170:
        jeff.goto(170,-170)

#Create Collectable
#Use a for loop to create and store your collectables into a list
def create_collectables():
    for food in foods:
        food.ht()
        food.setheading(-90)
        food.penup()
        rand_y = r.randrange(200,400)
        rand_x = r.randrange(-165,165)
        food.goto(rand_x,rand_y)
        food.showturtle()
        food.color("lime green")

#Move Collectable 
#Go through your list of collectables and move each item
def move_collectable():
    for food in foods:
        dist = r.randrange(2,4)
        food.forward(dist)
        check_vertical_bounds()
        check_collectable()
        

#Check Collectable Screen Bounds (Vertical)
#Check to see if a falling item is below vertical bounds, if so move back to the top
#Must pass the item in as an arguement
def check_vertical_bounds():
    for food in foods:
        if int(food.ycor())<=-200:
            food.ht()
            rand_y = r.randrange(275,350)
            rand_x = r.randrange(-165,170)
            update_lives(x)
            food.speed(0)
            food.goto(rand_x,rand_y)
            food.speed(3)
            food.showturtle()

#Check Player Catch Collectable
#Pass in a collectable item from a list and determine if it is in contact/proximity with the player
#Must pass the item in as an arguement
def check_collectable():
    for food in foods:
        if int(food.distance(jeff))<=6:
            update_score()
            food.ht()
            rand_y = r.randrange(200,500)
            rand_x = r.randrange(-185,185)
            food.speed(0)
            food.goto(rand_x,rand_y)
            food.speed(3)
            food.showturtle()

#Update Score
#If contact between collectable and player is made, update global score
def update_score():
    score.append(100)
    jeb.dot(15, "white")
    jeb.write(sum(score))

##Extendable Functions##

#Intro Screen
def start_screen():
    print("Welsome to the hit new game 'collect it'. You play as the organge arrow and you move by using the 'a' and 'd' to go left and right to eat the green food. If you miss one you will lose a    life and you only have 5.")

#Life Tracker
def update_lives(x):
    lives_lost.append(1)
    life = x - sum(lives_lost)
    bob.dot(15,"white")
    bob.write(life)
    if life == 0:
        game_over()
        

#Game Over Screen
def game_over():
    repeat = input("Do you wish to play again? ")
    if repeat == "yes":
        for food in foods:
            food.clear()
        jeb.clear()
        bob.clear()
        jeff.clear()
        lives_lost.clear()
        create_player()
        screen.onkey(left , "a")
        screen.onkey(right , 'd')
        create_collectables()
        setup_score()
        setup_lives()
        screen.listen()
    else:
        exit(0)

#####Setup Function Calls#####
#Use this section to call any core functions that are only called once and help to setup the turtle/game environment
start_screen()
create_player()
powerups_disply()
screen.onkey(left , "a")
screen.onkey(right , 'd')
screen.onkey(super_left , "Left")
screen.onkey(super_right , 'Right')
create_collectables()
setup_score()
setup_lives()
screen.listen()

#####Core Game Loop#####
#Use this while loop to create your game loop, define logic and call above functions
while True:
    move_collectable()
